<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaxes的博客</title>
  
  <subtitle>一个游戏开发者的小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-20T03:31:48.399Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jaxes</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lua学习笔记（六）</title>
    <link href="http://yoursite.com/2019/07/19/Lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://yoursite.com/2019/07/19/Lua学习笔记（六）/</id>
    <published>2019-07-19T09:58:00.000Z</published>
    <updated>2019-07-20T03:31:48.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lua面向对象"><a href="#Lua面向对象" class="headerlink" title="Lua面向对象"></a>Lua面向对象</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 元类</span></span><br><span class="line">People=&#123;isHumen=<span class="literal">true</span>&#125;<span class="comment">-- 此处定义的元素都是相当于C++的静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基类方法new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People:new</span><span class="params">(o,n,a)</span></span></span><br><span class="line">o=o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(o,self)<span class="comment">-- self相当于C++的this指针，但是这里指代的是元类People而不是对象o</span></span><br><span class="line">self.<span class="built_in">__index</span>=self</span><br><span class="line">o.name=n<span class="comment">-- 用self代替o相当于C++中给静态成员变量赋值</span></span><br><span class="line">o.age=a</span><br><span class="line"><span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基类元方法__tostring</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People:__tostring</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">local</span> sum=<span class="string">"名字为："</span>..self.name..<span class="string">"\n年龄为："</span>..self.age <span class="comment">-- 此处self指代的是实际调用时的对象</span></span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基类方法walk</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People:walk</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"我正在走！"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">me=People:new(<span class="literal">nil</span>,<span class="string">"Jaxes"</span>,<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用对象中的函数</span></span><br><span class="line"><span class="built_in">print</span>(me)<span class="comment">-- 等价于print(tostring(me))</span></span><br><span class="line">me:walk()<span class="comment">-- 等价于me.walk(me)</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 类Worker派生自People类</span></span><br><span class="line">Worker=People:new()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 派生类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Worker:new</span><span class="params">(o,n,a,id)</span></span></span><br><span class="line">o=o <span class="keyword">or</span> People:new(o,n,a)</span><br><span class="line"><span class="built_in">setmetatable</span>(o,self)</span><br><span class="line">self.<span class="built_in">__index</span>=self</span><br><span class="line">o.id=id</span><br><span class="line"><span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Worker:__tostring</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">local</span> sum=People.<span class="built_in">__tostring</span>(self)</span><br><span class="line">sum=sum..<span class="string">"\nID为："</span>..self.id</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">worker=Worker:new(<span class="literal">nil</span>,<span class="string">"kaka"</span>,<span class="number">55</span>,<span class="number">01</span>)</span><br><span class="line"><span class="built_in">print</span>(worker)</span><br><span class="line">worker:walk()<span class="comment">-- 继承自父类函数walk</span></span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>这个部分暂时还不清楚怎么搞，暂时做为后续储备内容</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lua面向对象&quot;&gt;&lt;a href=&quot;#Lua面向对象&quot; class=&quot;headerlink&quot; title=&quot;Lua面向对象&quot;&gt;&lt;/a&gt;Lua面向对象&lt;/h2&gt;&lt;h3 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerlink&quot; title=&quot;封
      
    
    </summary>
    
      <category term="Lua" scheme="http://yoursite.com/categories/Lua/"/>
    
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Lua学习笔记（五）</title>
    <link href="http://yoursite.com/2019/07/18/Lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2019/07/18/Lua学习笔记（五）/</id>
    <published>2019-07-18T15:12:00.000Z</published>
    <updated>2019-07-20T03:31:34.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lua模块与包"><a href="#Lua模块与包" class="headerlink" title="Lua模块与包"></a>Lua模块与包</h2><p>模块类似于一个封装库</p><p>创建方法：</p><ul><li>创建一个table</li><li>把需要导出的常量、函数放入其中</li><li>返回该table</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 文件名为mymodule.lua</span></span><br><span class="line"><span class="comment">-- 定义一个名为mymodule的模块</span></span><br><span class="line">mymodule=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个常量</span></span><br><span class="line">mymodule.constant=<span class="string">"这是一个常量"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mymodule.func1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"这是一个公有函数！\n"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"这是一个私有函数！"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module.func3</span><span class="params">()</span></span></span><br><span class="line">    func2()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mymodule</span><br></pre></td></tr></table></figure><h3 id="require函数"><a href="#require函数" class="headerlink" title="require函数"></a>require函数</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- require函数用于加载模块，使用方法：</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"mymodule"</span>)</span><br><span class="line"><span class="built_in">require</span> <span class="string">"mymodule"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行require后返回由模块常量或函数组成的table，并且还会定义一个包含该table的全局变量</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"mymodule"</span>)</span><br><span class="line"><span class="built_in">print</span>(module.constant)</span><br><span class="line">mymodule.func3()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 也可以创建别名</span></span><br><span class="line"><span class="keyword">local</span> m=<span class="built_in">require</span>(<span class="string">"mymodule"</span>)</span><br><span class="line"><span class="built_in">print</span>(m.constant)</span><br><span class="line">m.func3()</span><br></pre></td></tr></table></figure><p>加载机制：</p><p><a href="https://www.runoob.com/lua/lua-modules-packages.html" target="_blank" rel="noopener">https://www.runoob.com/lua/lua-modules-packages.html</a></p><h2 id="Metatable（元表）"><a href="#Metatable（元表）" class="headerlink" title="Metatable（元表）"></a>Metatable（元表）</h2><p>元表允许改变table的行为，每个行为关联了对应的元方法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：对指定的table设置metatable</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">table：操作对象</span></span><br><span class="line"><span class="comment">metatable：元表</span></span><br><span class="line"><span class="comment">返回值：绑定好对象的table</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">setmetatable</span>(<span class="built_in">table</span>,metatable)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：返回对象的元表</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">table：操作对象</span></span><br><span class="line"><span class="comment">返回值：元表</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">getmetatable</span>(<span class="built_in">table</span>)</span><br></pre></td></tr></table></figure><h3 id="index元方法"><a href="#index元方法" class="headerlink" title="__index元方法"></a>__index元方法</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当使用table中的某个键key时，会查找table中的该键key，如果没有这个键key则会寻找该table的metatable中的_index键，如果__index包含一个table，Lua会在表格中查找键值为key的元素</span></span><br><span class="line">other=&#123;foo=<span class="number">3</span>&#125;</span><br><span class="line">t=<span class="built_in">setmetatable</span>(&#123;&#125;,&#123;_index=other&#125;)<span class="comment">-- t中没有foo键，调用foo是在metatable中查找__index对应的table，再在该table上查找foo键</span></span><br><span class="line">t.foo<span class="comment">-- 输出：3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- __index 元方法查看表中元素是否存在，如果不存在，返回结果为 nil；如果存在则由 __index 返回结果。如果__index包含一个函数，Lua就会调用该函数，table和键作为参数传递给函数。</span></span><br><span class="line">mytable=<span class="built_in">setmetatable</span>(&#123;key1=<span class="string">"value1"</span>&#125;,&#123;</span><br><span class="line">        <span class="built_in">__index</span>=<span class="function"><span class="keyword">function</span><span class="params">(mytable,key)</span></span></span><br><span class="line">            <span class="keyword">if</span> key == <span class="string">"key2"</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"metatablevalue"</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mytable.key1,mytable.key2)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">value1metatablevalue</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><h4 id="Lua查找table元素规则："><a href="#Lua查找table元素规则：" class="headerlink" title="Lua查找table元素规则："></a>Lua查找table元素规则：</h4><ol><li><p>在表中查找，如果找到，返回该元素，找不到则继续</p></li><li><p>判断该表是否有元表，如果没有元表，返回 nil，有元表则继续</p></li><li><p>判断元表有没有__index方法，如果__index方法为nil，返回nil；如果__index方法是一个表，则重复1、2、3；如果__index方法是一个函数，则返回该函数的返回值</p></li></ol><h3 id="newindex元方法"><a href="#newindex元方法" class="headerlink" title="__newindex元方法"></a>__newindex元方法</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- __newindex方法用于对表更新，__index则用来对表访问</span></span><br><span class="line"><span class="comment">-- 给表的一个缺少的索引赋值，解释器就会查找__newindex 元方法：如果存在则调用这个函数而不进行赋值操作</span></span><br><span class="line">mymetatable=&#123;&#125;</span><br><span class="line">mytable=<span class="built_in">setmetatable</span>(&#123;key1=<span class="string">"value1"</span>&#125;,&#123;<span class="built_in">__newindex</span>=mymetatable&#125;)</span><br><span class="line"><span class="built_in">print</span>(mytable.key1)</span><br><span class="line">mytable.newkey=<span class="string">"新值2"</span></span><br><span class="line"><span class="built_in">print</span>(mytable.newkey,mymetatable.newkey)</span><br><span class="line">mytable.key1 = <span class="string">"新值1"</span></span><br><span class="line"><span class="built_in">print</span>(mytable.key1,mymetatable.key1)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">value1</span></span><br><span class="line"><span class="comment">nil新值2</span></span><br><span class="line"><span class="comment">新值1nil</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果__newindex元方法是一个函数，则会把该table，该key，该value作为参数传进函数</span></span><br><span class="line">mytable = <span class="built_in">setmetatable</span>(&#123;key1 = <span class="string">"value1"</span>&#125;, &#123;</span><br><span class="line"><span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable, key, value)</span></span></span><br><span class="line"><span class="built_in">rawset</span>(mytable, key, <span class="string">"\""</span>..value..<span class="string">"\""</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line">mytable.key1 = <span class="string">"new value"</span></span><br><span class="line">mytable.key2 = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(mytable.key1,mytable.key2)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">new value"4"</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><h3 id="为表添加操作符（类似于运算符重载）"><a href="#为表添加操作符（类似于运算符重载）" class="headerlink" title="为表添加操作符（类似于运算符重载）"></a>为表添加操作符（类似于运算符重载）</h3><table><thead><tr><th style="text-align:center">元方法</th><th style="text-align:center">对应运算符</th></tr></thead><tbody><tr><td style="text-align:center">__add</td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">__sub</td><td style="text-align:center">-（减号）</td></tr><tr><td style="text-align:center">__mul</td><td style="text-align:center">*</td></tr><tr><td style="text-align:center">__div</td><td style="text-align:center">/</td></tr><tr><td style="text-align:center">__mod</td><td style="text-align:center">%</td></tr><tr><td style="text-align:center">_unm</td><td style="text-align:center">-（负号）</td></tr><tr><td style="text-align:center">__concat</td><td style="text-align:center">..</td></tr><tr><td style="text-align:center">__eq</td><td style="text-align:center">==</td></tr><tr><td style="text-align:center">__lt</td><td style="text-align:center">&lt;</td></tr><tr><td style="text-align:center">__le</td><td style="text-align:center">&lt;=</td></tr></tbody></table><h3 id="call元方法"><a href="#call元方法" class="headerlink" title="__call元方法"></a>__call元方法</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- __call元方法在该表被当成函数来调用时会调用</span></span><br><span class="line">mytable=<span class="built_in">setmetatable</span>(&#123;<span class="number">10</span>&#125;,&#123;</span><br><span class="line">        <span class="built_in">__call</span>=<span class="function"><span class="keyword">function</span><span class="params">(mytable,newtable)</span></span></span><br><span class="line">            <span class="keyword">local</span> sum=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i=<span class="number">1</span>,#mytable <span class="keyword">do</span></span><br><span class="line">                sum=sum+mytable[i]</span><br><span class="line">           <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">for</span> i=<span class="number">1</span>,#newtable <span class="keyword">do</span></span><br><span class="line">                sum=sum+newtable[i]</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">return</span> sum</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;)</span><br><span class="line">newtable=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(mytable(newtable))<span class="comment">-- 输出结果：70</span></span><br></pre></td></tr></table></figure><h3 id="tostring元方法"><a href="#tostring元方法" class="headerlink" title="__tostring元方法"></a>__tostring元方法</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- __tostring 元方法用于修改表的输出行为</span></span><br><span class="line">mytable = <span class="built_in">setmetatable</span>(&#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span> &#125;, &#123;</span><br><span class="line"><span class="built_in">__tostring</span> = <span class="function"><span class="keyword">function</span><span class="params">(mytable)</span></span></span><br><span class="line"><span class="keyword">local</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line">         sum = sum + v</span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"表所有元素的和为 "</span> .. sum</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(mytable)<span class="comment">-- 输出结果：表所有元素的和为 60</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lua模块与包&quot;&gt;&lt;a href=&quot;#Lua模块与包&quot; class=&quot;headerlink&quot; title=&quot;Lua模块与包&quot;&gt;&lt;/a&gt;Lua模块与包&lt;/h2&gt;&lt;p&gt;模块类似于一个封装库&lt;/p&gt;
&lt;p&gt;创建方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个table&lt;/li
      
    
    </summary>
    
      <category term="Lua" scheme="http://yoursite.com/categories/Lua/"/>
    
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Lua学习笔记（四）</title>
    <link href="http://yoursite.com/2019/07/17/Lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/07/17/Lua学习笔记（四）/</id>
    <published>2019-07-17T14:07:00.000Z</published>
    <updated>2019-07-20T03:31:30.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lua数组"><a href="#Lua数组" class="headerlink" title="Lua数组"></a>Lua数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">array=&#123;<span class="string">"Lua"</span>,<span class="string">"Java"</span>,<span class="string">"C++"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span>,<span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(array[i])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">nil</span></span><br><span class="line"><span class="comment">Lua</span></span><br><span class="line"><span class="comment">Java</span></span><br><span class="line"><span class="comment">结果分析：</span></span><br><span class="line"><span class="comment">Lua索引值以1为起始，也可以指定0开始</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="comment">-- 以负数为数组索引值</span></span><br><span class="line">array=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">-2</span>,<span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">    array[i]=i*<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">-2</span>,<span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(array[i])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 初始化数组</span></span><br><span class="line">array=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">    array[i]=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">        array[i][j]=i*j</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 访问数组</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(array[i][j])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Lua迭代器"><a href="#Lua迭代器" class="headerlink" title="Lua迭代器"></a>Lua迭代器</h2><p>一种对象，能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。</p><p>在Lua中迭代器是一种支持指针类型的结构，它可以遍历集合的每一个元素</p><h3 id="泛型for迭代器"><a href="#泛型for迭代器" class="headerlink" title="泛型for迭代器"></a>泛型for迭代器</h3><p>泛型 for 在自己内部保存迭代函数，实际上它保存三个值：迭代函数、状态常量、控制变量</p><h4 id="泛型for的执行过程"><a href="#泛型for的执行过程" class="headerlink" title="泛型for的执行过程"></a>泛型for的执行过程</h4><p><a href="https://www.runoob.com/lua/lua-iterators.html" target="_blank" rel="noopener">https://www.runoob.com/lua/lua-iterators.html</a></p><h3 id="Lua迭代器类型"><a href="#Lua迭代器类型" class="headerlink" title="Lua迭代器类型"></a>Lua迭代器类型</h3><ul><li>无状态的迭代器</li><li>多状态的迭代器</li></ul><h4 id="无状态的迭代器"><a href="#无状态的迭代器" class="headerlink" title="无状态的迭代器"></a>无状态的迭代器</h4><p>不保留任何状态的迭代器，每一次迭代，迭代函数都是用<strong>两个变量</strong>（状态常量和控制变量）的值作为参数被调用，一个无状态的迭代器只利用这两个值可以获取下一个元素。如：<code>ipairs</code>函数</p><h4 id="多状态的迭代器"><a href="#多状态的迭代器" class="headerlink" title="多状态的迭代器"></a>多状态的迭代器</h4><p>迭代器需要保存多个状态信息而不是简单的状态常量和控制变量，方法：</p><ul><li>使用闭包（类似于lambda表达式，该表达式能包含函数本身以及外部引用变量，外部引用变量类似于lambda表达式中<code>[]</code>内捕获的外部变量）</li><li>将所有状态信息封装到table内</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">array=&#123;<span class="string">"Google"</span>,<span class="string">"Apple"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elementIterator</span><span class="params">(collection)</span></span></span><br><span class="line">    <span class="keyword">local</span> index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> count=#collection</span><br><span class="line">    <span class="comment">-- 闭包函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        index=index+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> index&lt;=count <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> collection[index]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elementIterator(array) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(element)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">Google</span></span><br><span class="line"><span class="comment">Apple</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><h2 id="Lua-table（表）"><a href="#Lua-table（表）" class="headerlink" title="Lua table（表）"></a>Lua table（表）</h2><p>table是一种数据结构，可以用于创建不同的数据类型：数组、字典等</p><p>table的特点：</p><ul><li>使用关联型数组，可以用任意非nil的类型作为数组的索引</li><li>大小不固定，可以根据需要扩容</li><li>可以用于解决模块（module）、包（package）和对象（Object）</li></ul><h3 id="table的构造"><a href="#table的构造" class="headerlink" title="table的构造"></a>table的构造</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 初始化表</span></span><br><span class="line">mytable=&#123;&#125;<span class="comment">-- 最简单的构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定值</span></span><br><span class="line">mytable[<span class="number">1</span>]=<span class="string">"Lua"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 移除引用</span></span><br><span class="line">mytable=<span class="literal">nil</span></span><br><span class="line"><span class="comment">-- Lua垃圾回收会释放内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：table间的赋值是传引用，两者指向同一个内存，只有当没有任何变量指向该内存（即所有table变量都指向了nil），Lua的垃圾回收机制才会清理相对应的内存</span></span><br></pre></td></tr></table></figure><h3 id="table操作"><a href="#table操作" class="headerlink" title="table操作"></a>table操作</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：列出参数中指定table的数组部分从start位置到end位置的所有元素, 元素间以指定的分隔符(sep)隔开</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">table：操作对象</span></span><br><span class="line"><span class="comment">sep：分隔符</span></span><br><span class="line"><span class="comment">start：起始索引</span></span><br><span class="line"><span class="comment">end：末尾索引</span></span><br><span class="line"><span class="comment">返回值：连接后的字符串</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">concat</span>(<span class="built_in">table</span>[,sep[,start[,<span class="keyword">end</span>]]])</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：在table的数组部分指定位置(pos)插入值为value的一个元素</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">table：操作对象</span></span><br><span class="line"><span class="comment">pos：插入位置，默认为数组部分的末尾</span></span><br><span class="line"><span class="comment">value：插入的值</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(<span class="built_in">table</span>,[pos,]value)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：删除table数组部分位于pos位置的元素，其后的元素会被前移</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">table：操作对象</span></span><br><span class="line"><span class="comment">pos：删除的元素位置，默认为最后一个元素的位置</span></span><br><span class="line"><span class="comment">返回值：删除的元素的值</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(<span class="built_in">table</span>[,pos])</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：对给定的table进行升序排序，数值按照数值大小，字符串按照首字母ASCCI码排序</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">table：操作对象</span></span><br><span class="line"><span class="comment">comp：比较方法，接收两个参数，返回一个布尔值，为true不交换，为false交换</span></span><br><span class="line"><span class="comment">返回值：nil</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(<span class="built_in">table</span>[,comp])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lua数组&quot;&gt;&lt;a href=&quot;#Lua数组&quot; class=&quot;headerlink&quot; title=&quot;Lua数组&quot;&gt;&lt;/a&gt;Lua数组&lt;/h2&gt;&lt;h3 id=&quot;一维数组&quot;&gt;&lt;a href=&quot;#一维数组&quot; class=&quot;headerlink&quot; title=&quot;一维数组&quot;
      
    
    </summary>
    
      <category term="Lua" scheme="http://yoursite.com/categories/Lua/"/>
    
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Lua学习笔记（三）</title>
    <link href="http://yoursite.com/2019/07/16/Lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/07/16/Lua学习笔记（三）/</id>
    <published>2019-07-16T13:57:00.000Z</published>
    <updated>2019-07-20T03:31:25.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lua函数"><a href="#Lua函数" class="headerlink" title="Lua函数"></a>Lua函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- []为可选部分</span></span><br><span class="line">[<span class="keyword">local</span>] <span class="function"><span class="keyword">function</span> <span class="title">function_name</span><span class="params">(argument1,argument2)</span></span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line">    [<span class="keyword">return</span> result]<span class="comment">-- 可以返回多个值，每个值以逗号隔开</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 函数名表示该函数的引用，与C/C++的函数指针类似</span></span><br></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 与C语言类似，在函数参数列表中使用三点...表示函数有可变的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> s=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>&#123;...&#125; <span class="keyword">do</span><span class="comment">-- 注意这里是&#123;&#125;，&#123;...&#125;表示一个由所有变长参数构成的table（这里实质是一个数组）</span></span><br><span class="line">        s=s+v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>))<span class="comment">-- 输出：25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可变参数也可以赋值给一个变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span><span class="params">(...)</span></span></span><br><span class="line">    result=<span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">arg</span>=&#123;...&#125;<span class="comment">-- arg为一个table，局部变量</span></span><br><span class="line">    <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">arg</span>) <span class="keyword">do</span></span><br><span class="line">        result=result+v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"总共传入 "</span> .. #<span class="built_in">arg</span> .. <span class="string">" 个数"</span>)<span class="comment">-- #也可以用于计算table中的元素个数</span></span><br><span class="line">    <span class="keyword">return</span> result/#<span class="built_in">arg</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"平均值为"</span>,average(<span class="number">10</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 也可以通过select("#",...)来获取可变参数的数量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span><span class="params">(...)</span></span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">arg</span>=&#123;...&#125;</span><br><span class="line">    <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">arg</span>) <span class="keyword">do</span></span><br><span class="line">        result = result + v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"总共传入 "</span> .. <span class="built_in">select</span>(<span class="string">"#"</span>,...) .. <span class="string">" 个数"</span>)<span class="comment">-- 等价于#arg</span></span><br><span class="line">    <span class="keyword">return</span> result/<span class="built_in">select</span>(<span class="string">"#"</span>,...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"平均值为"</span>,average(<span class="number">10</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 也可能同时需要固定参数和可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fwrite</span><span class="params">(fmt,...)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(fmt,...))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">fwrite(<span class="string">"rua\n"</span>)<span class="comment">-- fmt="rua"，没有可变参数</span></span><br><span class="line">fwrite(<span class="string">"%d%d\n"</span>,<span class="number">1</span>,<span class="number">2</span>)<span class="comment">-- fmt="%d%d"，可变参数为1和2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- select函数</span></span><br><span class="line"><span class="keyword">do</span>  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(...)</span></span>  </span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">select</span>(<span class="string">'#'</span>, ...) <span class="keyword">do</span>  <span class="comment">-- 获取参数总数</span></span><br><span class="line">            <span class="keyword">local</span> <span class="built_in">arg</span> = <span class="built_in">select</span>(i, ...); <span class="comment">-- 读取第i个可变实参</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"arg"</span>, <span class="built_in">arg</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Lua运算符"><a href="#Lua运算符" class="headerlink" title="Lua运算符"></a>Lua运算符</h2><p>Lua运算符类型</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>其他运算符</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>除了<code>^</code>用于计算幂，其他加、减、乘、除、取余、取反等都与C/C++相同</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>除了不等于号<code>~=</code>，其他等于、大于、小于、大于等于、小于等于等都与C/C++相同</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 只有当值为nil或false才是假，其他都为真（0也为真）</span></span><br><span class="line"><span class="keyword">and</span><span class="comment">-- 类似于C/C++的&amp;&amp;，当为假时返回从左到右表达式第一个为假的值（nil或false），否则返回后者</span></span><br><span class="line"><span class="keyword">or</span><span class="comment">-- 类似于C/C++的||，当为真时返回从左到右表达式第一个为真的值（非nil和非false），否则返回后者</span></span><br><span class="line"><span class="keyword">not</span> <span class="comment">-- 类似于C/C++的！</span></span><br></pre></td></tr></table></figure><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">..<span class="comment">-- 用于连接两个字符串或非字符串，最终返回一个字符串，注意连接一个number时需要在number与..之间加一个空格</span></span><br><span class="line">#<span class="comment">-- 一元运算符，返回string或table的长度</span></span><br></pre></td></tr></table></figure><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><table><thead><tr><th style="text-align:center">优先级</th><th style="text-align:center">运算符</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">^</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">not、-（负号）</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">*、/</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">+、-（减号）</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">..</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">&lt;、&gt;、&lt;=、&gt;=、~=、==</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">and</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">or</td></tr></tbody></table><p>除了<code>^</code>和<code>..</code>以外，其他所有的<strong><em>二元运算符</em></strong>都是<strong><em>从左向右</em></strong>结合</p><h2 id="Lua字符串"><a href="#Lua字符串" class="headerlink" title="Lua字符串"></a>Lua字符串</h2><h3 id="字符串表示方法"><a href="#字符串表示方法" class="headerlink" title="字符串表示方法"></a>字符串表示方法</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a string'</span><span class="comment">-- 单引号</span></span><br><span class="line"><span class="string">"a string"</span><span class="comment">-- 双引号</span></span><br><span class="line"><span class="string">[[a string]]</span><span class="comment">-- 双中括号</span></span><br></pre></td></tr></table></figure><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>与C/C++相同</p><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：字符串全部转为大写字母</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">argument：原字符串</span></span><br><span class="line"><span class="comment">返回值：转换为大写后的字符串</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">upper</span>(argument)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：字符串全部转为小写字母</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">argument：原字符串</span></span><br><span class="line"><span class="comment">返回值：转换为小写后的字符串</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">lower</span>(argument)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：在字符串中替换，相当于其他语言的string.replace</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">mainString：要替换的字符串</span></span><br><span class="line"><span class="comment">findString：被替换的字符串</span></span><br><span class="line"><span class="comment">replaceString：要替换成的字符串</span></span><br><span class="line"><span class="comment">num：替换次数（忽略表示全部替换）</span></span><br><span class="line"><span class="comment">返回值：替换后的字符串和实际替换次数</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">gsub</span>(mainString,findString,replaceString,num)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：查找子串</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">str：目标字符串</span></span><br><span class="line"><span class="comment">substr：子串</span></span><br><span class="line"><span class="comment">init：查找的起始索引</span></span><br><span class="line"><span class="comment">end：查找的末尾索引</span></span><br><span class="line"><span class="comment">返回值：子串始末字符位置索引，不存在返回nil</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">find</span>(str,substr,[init,[<span class="keyword">end</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：字符串反转</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">arg：原字符串</span></span><br><span class="line"><span class="comment">返回值：反转后的字符串</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">reverse</span>(<span class="built_in">arg</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：返回一个类似C语言的printf的格式化字符串</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">...：可变参数列表</span></span><br><span class="line"><span class="comment">返回值：格式化字符串</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(...)</span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"the value is:%d"</span>,<span class="number">4</span>)<span class="comment">-- 返回：the value is:4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：将整型数字转成字符并连接</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">arg：ASCCI码组成的参数列表</span></span><br><span class="line"><span class="comment">返回值：一个由ASCCI码对应的字符连接成的字符串</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">char</span>(<span class="built_in">arg</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：转换字符为整数值</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">arg：字符串</span></span><br><span class="line"><span class="comment">int：指定字符串某索引位置的字符，默认为第一个字符</span></span><br><span class="line"><span class="comment">返回值：字符对应的ASCCI码整数值</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="built_in">arg</span>，[int])</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：计算字符串长度</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">arg：字符串</span></span><br><span class="line"><span class="comment">返回值：字符串长度</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">len</span>(<span class="built_in">arg</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：拷贝并连接n个字符串</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">string：字符串</span></span><br><span class="line"><span class="comment">n：拷贝次数</span></span><br><span class="line"><span class="comment">返回值：字符串string的n个拷贝连接成的字符串</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">rep</span>(<span class="built_in">string</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 连接字符串</span></span><br><span class="line">..</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：查找下一个匹配的子串</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">str：字符串</span></span><br><span class="line"><span class="comment">pattern：正则匹配表达式</span></span><br><span class="line"><span class="comment">返回值：一个迭代器函数，每一次调用这个函数，返回一个在字符串 str 找到的下一个符合 pattern 描述的子串，如果没有找到子串，返回nil</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">gmatch</span>(str,pattern)</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">作用：寻找原字符串str中的第一个配对</span></span><br><span class="line"><span class="comment">参数列表：</span></span><br><span class="line"><span class="comment">str：字符串</span></span><br><span class="line"><span class="comment">pattern：正则匹配表达式</span></span><br><span class="line"><span class="comment">init：指定搜寻过程的起点，默认为1</span></span><br><span class="line"><span class="comment">返回值：配对表达式中的所有捕获结果，即匹配到的字符串</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">match</span>(str,pattern,init)</span><br></pre></td></tr></table></figure><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><p>除了<code>%q</code>，其余与C语言类似</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- %q接受一个字符串并将其转化为可安全被Lua编译器读入的格式，以下写法输出等价</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%q"</span>,<span class="string">"the\nLua"</span>)</span><br><span class="line"><span class="comment">-- 输出以下字符串，与在Lua编辑器下编写换行的字符串等价</span></span><br><span class="line"><span class="string">"the\</span></span><br><span class="line"><span class="string">Lua"</span></span><br></pre></td></tr></table></figure><p><strong><em>注意：</em></strong><code>%x</code>与<code>%X</code>，<code>%e</code>与<code>%E</code>是不同的输出，前者输出都为小写字母，后者输出统一为大写字母</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%x"</span>,<span class="number">13</span>)<span class="comment">-- 输出d</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%X"</span>,<span class="number">13</span>)<span class="comment">-- 输出D</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%e"</span>,<span class="number">1000</span>)<span class="comment">-- 输出1.000000e+03</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%E"</span>,<span class="number">1000</span>)<span class="comment">-- 输出1.000000E+03</span></span><br></pre></td></tr></table></figure><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p><a href="https://www.runoob.com/lua/lua-strings.html" target="_blank" rel="noopener">https://www.runoob.com/lua/lua-strings.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lua函数&quot;&gt;&lt;a href=&quot;#Lua函数&quot; class=&quot;headerlink&quot; title=&quot;Lua函数&quot;&gt;&lt;/a&gt;Lua函数&lt;/h2&gt;&lt;h3 id=&quot;函数定义&quot;&gt;&lt;a href=&quot;#函数定义&quot; class=&quot;headerlink&quot; title=&quot;函数定义&quot;
      
    
    </summary>
    
      <category term="Lua" scheme="http://yoursite.com/categories/Lua/"/>
    
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Lua学习笔记（二）</title>
    <link href="http://yoursite.com/2019/07/15/Lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/07/15/Lua学习笔记（二）/</id>
    <published>2019-07-15T11:12:00.000Z</published>
    <updated>2019-07-20T03:30:02.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lua变量"><a href="#Lua变量" class="headerlink" title="Lua变量"></a>Lua变量</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">Lua变量三种类型：全局变量（储存在名称为_G的table中）、局部变量、table中的域</span></span><br><span class="line"><span class="comment">Lua中的变量全都是全局变量，即使在语句块或函数里，除非用local显式声明为局部变量</span></span><br><span class="line"><span class="comment">局部变量作用域与C/C++概念相同</span></span><br><span class="line"><span class="comment">变量默认值为nil</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="comment">-- test.lua文件脚本</span></span><br><span class="line">a=<span class="number">1</span><span class="comment">-- 全局变量</span></span><br><span class="line"><span class="keyword">local</span> b=<span class="number">2</span><span class="comment">-- 文件内局部变量</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rua</span><span class="params">()</span></span></span><br><span class="line">    c=<span class="number">5</span><span class="comment">-- 全局变量</span></span><br><span class="line">    <span class="keyword">local</span> d=<span class="number">6</span><span class="comment">-- 局部变量</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">rua()</span><br><span class="line"><span class="built_in">print</span>(c,d)<span class="comment">--输出:5 nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> a=<span class="number">6</span><span class="comment">-- 局部变量，这里局部变量覆盖了全局变量，引用外部全局变量时可以用_G.a来引用，类似于C/C++的::a</span></span><br><span class="line">    b=<span class="number">6</span><span class="comment">-- 对局部变量重新赋值</span></span><br><span class="line">    <span class="built_in">print</span>(a,b)<span class="comment">-- 输出：6 6</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a,b)<span class="comment">-- 输出：5 6</span></span><br></pre></td></tr></table></figure><h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 赋值可以改变一个变量的值和表域</span></span><br><span class="line">a=<span class="string">"hello"</span> .. <span class="string">"world"</span></span><br><span class="line">t.n=t.n+<span class="number">1</span></span><br><span class="line"><span class="comment">-- 可以对多个变量同时赋值</span></span><br><span class="line">a,b=<span class="number">10</span>,<span class="number">2</span>*x<span class="comment">-- a=10,b=2*x</span></span><br><span class="line"><span class="comment">-- 赋值语句会先计算右边所有的值，然后再执行赋值操作</span></span><br><span class="line"><span class="comment">-- 交换变量写法</span></span><br><span class="line">x,y=y,x</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">变量和值个数不一致:</span></span><br><span class="line"><span class="comment">变量个数&gt;值的个数按变量个数补足nil</span></span><br><span class="line"><span class="comment">变量个数&lt;值的个数多余的值被忽略</span></span><br><span class="line"><span class="comment">]]</span> </span><br><span class="line">a,b,c=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)<span class="comment">-- 输出：0 nil nil</span></span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- table的索引使用方括号[]和点.的操作</span></span><br><span class="line">t[i]</span><br><span class="line">t.i<span class="comment">-- 当索引为字符串类型时的一种简化写法</span></span><br><span class="line">gettable_event(t,i)<span class="comment">-- 采用索引访问本质上是一个类似这样的函数调用</span></span><br></pre></td></tr></table></figure><h2 id="Lua循环"><a href="#Lua循环" class="headerlink" title="Lua循环"></a>Lua循环</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition) <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="数值for循环"><a href="#数值for循环" class="headerlink" title="数值for循环"></a>数值for循环</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- var从exp1变化到exp2，每次变化以exp3为步长，可选，不指定默认为1</span></span><br><span class="line"><span class="keyword">for</span> var=exp1,exp2,[exp3] <span class="keyword">do</span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="泛型for循环"><a href="#泛型for循环" class="headerlink" title="泛型for循环"></a>泛型for循环</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 相当于foreach</span></span><br><span class="line">a=&#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="repeat…until循环"><a href="#repeat…until循环" class="headerlink" title="repeat…until循环"></a>repeat…until循环</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 相当于C/C++的do...while</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">until</span>(condition)</span><br></pre></td></tr></table></figure><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Lua仅支持break，不支持continue，同其他语言</span></span><br><span class="line"><span class="keyword">while</span>(condition) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Lua流程控制"><a href="#Lua流程控制" class="headerlink" title="Lua流程控制"></a>Lua流程控制</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 两条分支</span></span><br><span class="line"><span class="keyword">if</span>(condition) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多条分支</span></span><br><span class="line"><span class="keyword">if</span>(condition1) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">elseif</span>(condition2) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lua变量&quot;&gt;&lt;a href=&quot;#Lua变量&quot; class=&quot;headerlink&quot; title=&quot;Lua变量&quot;&gt;&lt;/a&gt;Lua变量&lt;/h2&gt;&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Lua" scheme="http://yoursite.com/categories/Lua/"/>
    
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Lua学习笔记（一）</title>
    <link href="http://yoursite.com/2019/07/15/Lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/07/15/Lua学习笔记（一）/</id>
    <published>2019-07-15T01:27:00.000Z</published>
    <updated>2019-07-20T03:31:10.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等号数量只要两边一致即可</span></span><br><span class="line"><span class="comment">--[=[多行注释]=]</span></span><br></pre></td></tr></table></figure><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>A-Z、a-z、下划线_开头后加上0个或多个字母、下划线、数字（0-9）</p><p><strong>注意</strong>：最好不要使用下划线加大写字母，Lua保留字也是如此</p><p>不允许特殊字符@、$、%定义标识符</p><p>区分大小写</p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Lua的保留关键字</span></span><br><span class="line"><span class="keyword">and</span> <span class="keyword">break</span> <span class="keyword">do</span> <span class="keyword">else</span> <span class="keyword">elseif</span> <span class="keyword">end</span> <span class="literal">false</span> <span class="keyword">for</span> <span class="function"><span class="keyword">function</span> <span class="title">if</span> <span class="title">in</span> <span class="title">local</span> <span class="title">nil</span> <span class="title">not</span> <span class="title">or</span> <span class="title">repeat</span> <span class="title">return</span> <span class="title">then</span> <span class="title">true</span> <span class="title">until</span> <span class="title">while</span></span></span><br><span class="line"><span class="function"><span class="comment">-- 一般约定，以下划线开头连接一串大写字母的名字（如_VERSION）被保留用于Lua内部全局变量</span></span></span><br><span class="line"><span class="function"><span class="title">_VERSION</span></span></span><br></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">默认情况下变量认为是全局的，不需要声明，赋值后即创建了这个全局变量，访问一个没有初始化的全局变量不会出错，会返回nil</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">-- 返回nil</span></span><br><span class="line">b=<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">-- 返回10</span></span><br><span class="line"><span class="comment">-- 如果要删除一个全局变量，只需要将变量赋值为nil</span></span><br><span class="line">b=<span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">-- 返回nil</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Lua是动态类型语言，不需要定义，只需要赋值。值可以储存在变量中，作为参数传递或结果返回</span></span><br><span class="line"><span class="comment">-- 8个基本类型nil、boolean、number、string、userdata、function、thread、table</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">nil只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）</span></span><br><span class="line"><span class="comment">boolean包含两个值：false和true</span></span><br><span class="line"><span class="comment">number双精度类型的实浮点数</span></span><br><span class="line"><span class="comment">string字符串由一对双引号或单引号来表示</span></span><br><span class="line"><span class="comment">function由C或Lua编写的函数</span></span><br><span class="line"><span class="comment">userdata表示任意存储在变量中的C数据结构</span></span><br><span class="line"><span class="comment">thread表示执行的独立线程，用于执行协程</span></span><br><span class="line"><span class="comment">tableLua中的表是一个“关联数组”，数组的索引可以是数字、字符串或表类型。在Lua里，table的创建时通过“构造表达式”来完成，最简单构造表达式是&#123;&#125;，用来创建一个空表</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="built_in">type</span>() <span class="comment">-- 该函数可以测试给定变量或者值得类型</span></span><br></pre></td></tr></table></figure><h3 id="nil（空）"><a href="#nil（空）" class="headerlink" title="nil（空）"></a>nil（空）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- nil类型表示没有任何有效值，它只有一个值nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment">-- 输出nil</span></span><br><span class="line"><span class="comment">-- 对于全局变量和table，nil有删除的作用</span></span><br><span class="line">tab1=&#123;key1=<span class="string">"val1"</span>,key2=<span class="string">"val2"</span>,<span class="string">"val3"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab1) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k .. <span class="string">" - "</span> .. v) <span class="comment">-- ..运算符用于连接字符串</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">tab1.key1=<span class="literal">nil</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab1) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k .. <span class="string">" - "</span> .. v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="boolean（布尔）"><a href="#boolean（布尔）" class="headerlink" title="boolean（布尔）"></a>boolean（布尔）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 只有两个可选值：false、true，Lua把false和nil看作是“假”，其他的都为真</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">false</span> <span class="keyword">or</span> <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"至少有一个是true"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"false和nil都为false！"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 执行结果为false和nil都为false！</span></span><br></pre></td></tr></table></figure><h3 id="number（数字）"><a href="#number（数字）" class="headerlink" title="number（数字）"></a>number（数字）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Lua默认只有一种number类型 double（双精度）类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">2</span>))<span class="comment">-- 输出number</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">2e+1</span>))<span class="comment">-- 输出number</span></span><br></pre></td></tr></table></figure><h3 id="string（字符串）"><a href="#string（字符串）" class="headerlink" title="string（字符串）"></a>string（字符串）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">string1=<span class="string">"this is string1"</span></span><br><span class="line">string2=<span class="string">"this is string2"</span></span><br><span class="line"><span class="comment">-- 也可以用两个方括号“[[]]”来表示“一块”字符串，输出时会将换行和制表等格式也输出</span></span><br><span class="line">string3=<span class="string">[[</span></span><br><span class="line"><span class="string">emmmmmmmmmm</span></span><br><span class="line"><span class="string">aaaaaaaaaaa</span></span><br><span class="line"><span class="string">ruaruaruaruarua!</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="comment">-- 对一个数字字符串进行算术操作，Lua会尝试将这个数字字符串转成一个数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"2"</span>+<span class="number">6</span>)<span class="comment">-- 输出8.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-2e2"</span>*<span class="string">"6"</span>)<span class="comment">-- 输出-1200.0</span></span><br><span class="line"><span class="comment">-- 字符串连接使用..操作符，注意操作对象如果为数字，则操作对象与操作符之间需要加空格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"2"</span>..<span class="string">"b"</span>)<span class="comment">-- 输出2b</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">233</span> .. <span class="number">666</span>)<span class="comment">-- 输出233666</span></span><br><span class="line"><span class="comment">-- 使用#来计算字符串长度，放在字符串前面</span></span><br><span class="line"><span class="built_in">len</span>=<span class="string">"www.rua.com"</span></span><br><span class="line"><span class="built_in">print</span>(#<span class="built_in">len</span>)<span class="comment">-- 输出11</span></span><br><span class="line"><span class="built_in">print</span>(#<span class="string">"helloworld"</span>)<span class="comment">-- 输出10</span></span><br></pre></td></tr></table></figure><h3 id="table（表）"><a href="#table（表）" class="headerlink" title="table（表）"></a>table（表）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个空表</span></span><br><span class="line"><span class="keyword">local</span> tbl1=&#123;&#125;</span><br><span class="line"><span class="comment">-- 直接初始表</span></span><br><span class="line"><span class="keyword">local</span> tbl2=&#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>&#125;</span><br><span class="line"><span class="comment">-- 创建键值对</span></span><br><span class="line">a[<span class="string">"key"</span>]=<span class="string">"value"</span></span><br><span class="line">a[<span class="number">1</span>]=<span class="number">22</span></span><br><span class="line">key=<span class="number">10</span><span class="comment">-- 这里只是赋值，赋值后用于后面的创建键值对</span></span><br><span class="line">a[key]=<span class="number">22</span></span><br><span class="line">a[a[key]]=a[key]+<span class="number">11</span></span><br><span class="line"><span class="comment">-- 在Lua中，默认初始索引一般以1开始</span></span><br><span class="line"><span class="keyword">local</span> tb1=&#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key,val <span class="keyword">in</span> <span class="built_in">pairs</span>(tb1) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Key"</span>,key)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">Key 1</span></span><br><span class="line"><span class="comment">Key 2</span></span><br><span class="line"><span class="comment">Key 3</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="comment">-- table的长度是动态增长的</span></span><br></pre></td></tr></table></figure><h3 id="function（函数）"><a href="#function（函数）" class="headerlink" title="function（函数）"></a>function（函数）</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在Lua中，函数是被看作“第一类值（First-Class Value）”，函数可以存在变量里</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">(n)</span></span><span class="comment">-- 一个递归求阶乘的函数</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n*fun1(n<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(fun1(<span class="number">5</span>))<span class="comment">-- 输出120</span></span><br><span class="line">fun2=fun1</span><br><span class="line"><span class="built_in">print</span>(fun2(<span class="number">5</span>))<span class="comment">-- 输出120</span></span><br><span class="line"><span class="comment">-- 也可以使用匿名函数的形式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span><span class="params">(tab,fun)</span></span></span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(fun(k,v))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">tab=&#123;kay1=<span class="string">"val1"</span>,key2=<span class="string">"val2"</span>&#125;</span><br><span class="line">testFun(tab,</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(key,val)</span></span></span><br><span class="line">        <span class="keyword">return</span> key .. <span class="string">"="</span> .. val</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">执行结果:</span></span><br><span class="line"><span class="comment">key1=val1</span></span><br><span class="line"><span class="comment">key2=val2</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><h3 id="thread（线程）"><a href="#thread（线程）" class="headerlink" title="thread（线程）"></a>thread（线程）</h3><p>Lua中主要的线程是协程（coroutine）</p><p>线程可以同时多个运行，协程任意时刻智能运行一个</p><h3 id="userdata（自定义类型）"><a href="#userdata（自定义类型）" class="headerlink" title="userdata（自定义类型）"></a>userdata（自定义类型）</h3><p>用户自定义数据，用于表示一种由应用程序或C/C++语言库所创建的类型，可以将任意C/C++的任意数据类型的数据（通常是struct和指针）存储到Lua变量中调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="Lua" scheme="http://yoursite.com/categories/Lua/"/>
    
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Unity3D学习笔记之UGUI：Canvas</title>
    <link href="http://yoursite.com/2018/11/27/Unity3D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BUGUI%EF%BC%9ACanvas/"/>
    <id>http://yoursite.com/2018/11/27/Unity3D学习笔记之UGUI：Canvas/</id>
    <published>2018-11-27T09:35:30.000Z</published>
    <updated>2018-12-08T15:29:25.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Canvas组件："><a href="#Canvas组件：" class="headerlink" title="Canvas组件："></a>Canvas组件：</h2><ol><li>Rander Mode（渲染模式）：</li></ol><hr><p>   <img src="/2018/11/27/Unity3D学习笔记之UGUI：Canvas/面板1.png" alt=""></p><ol><li><p>（默认）Screen Space - Overlay（屏幕空间叠加模式）：自动填充场景，使Canvas自动适应Game窗口的大小，并且在此模式下Rect Transform组件不可编辑，其中的所有值将由Canvas自动设置</p><ol><li><p>Pixel Perfect：开启时，UI元素将在渲染时调整到最近的像素，使外观更加锐利</p></li><li><p>Sort Order：表示该Canvas渲染的顺序，数字越大越迟进渲染管线，位置处于越上层</p></li><li><p>Target Display：表示渲染到的目标显示窗</p><hr><p><img src="/2018/11/27/Unity3D学习笔记之UGUI：Canvas/面板2.png" alt=""></p><p><img src="/2018/11/27/Unity3D学习笔记之UGUI：Canvas/演示1.png" alt=""></p><p><img src="/2018/11/27/Unity3D学习笔记之UGUI：Canvas/演示2.png" alt=""></p></li></ol></li><li><p>Screen Space - Camera（屏幕空间相机模式）：和1类似，但是Canvas是直接填充到相机的截锥体中，并且可以设置独立的相机，允许UI元素有深度感</p><ol><li><p>Pixel Perfect：同上</p></li><li><p>Render Camera：渲染此Canvas的相机</p></li><li><p>Plane Distance：Canvas离相机的距离</p></li><li><p>Sorting Layer：渲染顺序层级</p></li><li><p>Order in Layer：在当前渲染顺序层级的子渲染顺序</p><hr><p><img src="/2018/11/27/Unity3D学习笔记之UGUI：Canvas/面板3.png" alt=""></p></li></ol><p><img src="/2018/11/27/Unity3D学习笔记之UGUI：Canvas/演示3.png" alt=""></p></li><li><p>World Space（世界空间模式）：此模式下的UI元素可以是场景中的静态元素或者是可移动元素，并且Rect Transform组件允许设置，不再随屏幕的变化而变化</p><ol><li>Event Camera：检测点击UI等事件的相机</li><li>Sorting Layer：同上</li><li>Order in Layer：同上</li></ol></li></ol><h2 id="Canvas-Scaler组件："><a href="#Canvas-Scaler组件：" class="headerlink" title="Canvas Scaler组件："></a>Canvas Scaler组件：</h2><ol><li><p>UI Scale Mode（缩放模式）：</p><hr><p><img src="/2018/11/27/Unity3D学习笔记之UGUI：Canvas/面板4.png" alt=""></p><ol><li><p>Constant Pixel Size：固定像素尺寸，无论分辨率是多少，占用的像素都是一样的</p><ol><li>Scale Factor：缩放比例，默认为1</li></ol><hr><p><img src="/2018/11/27/Unity3D学习笔记之UGUI：Canvas/面板5.png" alt=""></p></li><li><p>Scale With Screen Size：根据屏幕大小进行缩放</p><ol><li>Reference Resolution：开发时设置的分辨率，所有的缩放基于这个分辨率</li><li>Screen Match Mode：屏幕适配模式<ol><li>Match Width Or Height（默认）：匹配宽度或高度<ol><li>Match：宽度和高度的缩放权重，横屏游戏用Height匹配，竖屏游戏用Width匹配</li></ol></li><li>Expend：如果屏幕实际大小大于参考标准时，选用此模式，它会适当放大Canvas</li><li>Shrink：如果屏幕实际大小小于参考标准时，选用此模式，它会适当缩小Canvas</li></ol></li></ol><hr><p><img src="/2018/11/27/Unity3D学习笔记之UGUI：Canvas/面板6.png" alt=""></p></li><li><p>Constant Physical Size：物理大小不变模式</p><ol><li>Physical Unit：物理单位<ol><li>Centimeters（厘米）：0.01米</li><li>Millimeters（毫米）：0.1厘米</li><li>Inches（英寸）：英制单位</li><li>Points（积分）：1/72英寸</li><li>Picas（派卡）：1/6英寸</li></ol></li><li>Fallback Screen DPI：屏幕DPI</li><li>Default Sprite DPI：默认精灵DPI</li></ol></li></ol></li><li><p>Reference Pixels Per Unit（参考像素每单位）：每个单位的参考像素，和1x1x1的Cube来比较，棱长1表示一个单位，一个单位由n个像素组成，n即为此项的值，默认为100</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Canvas组件：&quot;&gt;&lt;a href=&quot;#Canvas组件：&quot; class=&quot;headerlink&quot; title=&quot;Canvas组件：&quot;&gt;&lt;/a&gt;Canvas组件：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Rander Mode（渲染模式）：&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;
      
    
    </summary>
    
      <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="游戏开发" scheme="http://yoursite.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Unity3D学习笔记之碰撞器和触发器</title>
    <link href="http://yoursite.com/2018/11/21/Unity3D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%A2%B0%E6%92%9E%E5%99%A8%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>http://yoursite.com/2018/11/21/Unity3D学习笔记之碰撞器和触发器/</id>
    <published>2018-11-21T14:15:22.000Z</published>
    <updated>2018-11-21T14:16:31.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碰撞器种类："><a href="#碰撞器种类：" class="headerlink" title="碰撞器种类："></a>碰撞器种类：</h2><ol><li>Box Collider（盒碰撞器）——立方体</li><li>Sphere Collider（球碰撞器）——球体</li><li>Capsule Collider（胶囊碰撞器）——胶囊体</li><li>Mesh Collider（网格碰撞器）——从物体的网格创建一个碰撞器，不能与其他网格碰撞器相碰撞</li><li>Wheel Collider（轮碰撞器）——特殊的碰撞器，用于创建车或其他的交通工具的车轮</li></ol><h2 id="碰撞器属性："><a href="#碰撞器属性：" class="headerlink" title="碰撞器属性："></a>碰撞器属性：</h2><ol><li>Material：材质</li><li>Is Trigger：开启触发器</li><li>Radius：半径</li><li>Center：中心</li><li>Size：碰撞器的大小</li><li>Convex（网格碰撞器特有）：如激活，该网格碰撞器将会和其他网格碰撞器碰撞，突起的网格碰撞器限制在255个三角形面内。</li></ol><h2 id="碰撞器类型："><a href="#碰撞器类型：" class="headerlink" title="碰撞器类型："></a>碰撞器类型：</h2><ol><li>Static Collider（静态碰撞器）：只有碰撞器，没有刚体。基本保持静止或者轻微的移动，一般应用于环境模型，和刚体碰撞时不会移动</li><li>Rigidbody Collider（刚体碰撞器）：同时附加了刚体和碰撞器。移动完全受脚本和物理引擎的影响。</li><li>Kinematic Rigidbody Collider（运动学刚体碰撞器）：同时附加刚体和碰撞器，并且激活刚体组件的IsKinematic。移动必须通过修改其Transform组件，不受力的影响。能影响其他的刚体，和其他碰撞器碰撞时不会受影响，但是会触发碰撞函数。</li><li>Character Controllers（角色控制器）：允许高速运动时立刻转身，可以执行碰撞检测保证角色可以沿墙滑动或者上下台阶。受重力影响，不受碰撞产生的力影响，可以由代码施加的力推动。不具有物理特性。如果想让角色控制器推开其他刚体或者对象，可以在对象附加的脚本中添加OnControllerColliderHit()函数，使得碰撞生效。</li></ol><h2 id="触发器："><a href="#触发器：" class="headerlink" title="触发器："></a>触发器：</h2><p>在碰撞器的属性面版上勾选上IsTrigger便成为了触发器</p><p>两者区别：碰撞器根据物理引擎引发碰撞，产生碰撞的效果；触发器被物理引擎所忽略，没有碰撞效果</p><h2 id="碰撞信息检测函数："><a href="#碰撞信息检测函数：" class="headerlink" title="碰撞信息检测函数："></a>碰撞信息检测函数：</h2><ol><li>OnCollisionEnter(Collision collision)当开始产生碰撞时调用此函数</li><li>OnCollisionExit(Collision collision)当结束碰撞时调用此函数</li><li>OnCollisionStay(Collision collision)当持续接触时调用此函数</li></ol><h2 id="触发信息检测函数："><a href="#触发信息检测函数：" class="headerlink" title="触发信息检测函数："></a>触发信息检测函数：</h2><p>基本和碰撞信息检测函数类似</p><ol><li>OnTriggerEnter(Collision collision)</li><li>OnTriggerExit(Collision collision)</li><li>OnTriggerStay(Collision collision)</li></ol><h2 id="碰撞信息和触发信息："><a href="#碰撞信息和触发信息：" class="headerlink" title="碰撞信息和触发信息："></a>碰撞信息和触发信息：</h2><p>​                                <strong>碰撞后有碰撞检测并有碰撞信息发出</strong></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Static Collider 静态碰撞器</th><th style="text-align:center">Rigidbody Collider 刚体碰撞器</th><th style="text-align:center">Kinematic  Rigidbody Collider 运动学刚体碰撞器</th><th style="text-align:center">Static  Trigger Collider 静态触发碰撞器</th><th style="text-align:center">Rigidbody  Trigger Collider 刚体触发碰撞器</th><th style="text-align:center">Kinematic Rigidbody  Trigger Collider 运动学刚体触发碰撞器</th></tr></thead><tbody><tr><td style="text-align:center">Static Collider 静态碰撞器</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Rigidbody Collider 刚体碰撞器</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Kinematic Rigidbody Collider  运动学刚体碰撞器</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Static Trigger Collider 静态触发碰撞器</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Rigidbody Trigger Collider 刚体触发碰撞器</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Kinematic Rigidbody Trigger Collider 运动学刚体触发碰撞器</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>​                                        <strong>碰撞后有触发信息</strong></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Static Collider 静态碰撞器</th><th style="text-align:center">Rigidbody Collider 刚体碰撞器</th><th style="text-align:center">Kinematic  Rigidbody Collider 运动学刚体碰撞器</th><th style="text-align:center">Static  Trigger Collider 静态触发碰撞器</th><th style="text-align:center">Rigidbody  Trigger Collider 刚体触发碰撞器</th><th style="text-align:center">Kinematic Rigidbody  Trigger Collider 运动学刚体触发碰撞器</th></tr></thead><tbody><tr><td style="text-align:center">Static Collider 静态碰撞器</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:center">Rigidbody Collider 刚体碰撞器</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:center">Kinematic Rigidbody Collider 运动学刚体碰撞器</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:center">Static Trigger Collider 静态触发碰撞器</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:center">Rigidbody Trigger Collider 刚体触发碰撞器</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:center">Kinematic Rigidbody Trigger Collider 运动学刚体触发碰撞器</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;碰撞器种类：&quot;&gt;&lt;a href=&quot;#碰撞器种类：&quot; class=&quot;headerlink&quot; title=&quot;碰撞器种类：&quot;&gt;&lt;/a&gt;碰撞器种类：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Box Collider（盒碰撞器）——立方体&lt;/li&gt;
&lt;li&gt;Sphere Collider
      
    
    </summary>
    
      <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="游戏开发" scheme="http://yoursite.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Unity3D学习笔记之Rigidbody(刚体组件)</title>
    <link href="http://yoursite.com/2018/10/28/Unity3D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BRigidbody-%E5%88%9A%E4%BD%93%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/10/28/Unity3D学习笔记之Rigidbody-刚体组件/</id>
    <published>2018-10-28T06:38:54.000Z</published>
    <updated>2018-10-28T07:01:04.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Rigidbody面板各属性："><a href="#Rigidbody面板各属性：" class="headerlink" title="Rigidbody面板各属性："></a>Rigidbody面板各属性：</h2><ol><li><p>Mass（质量）：单位kg</p></li><li><p>Drag（阻力）</p></li><li><p>Angular Drag（角阻力）</p></li><li><p>Use Gravity（开启重力）</p></li><li><p>Is Kinematic（开启动力学模式）：开启之后将不在受物理引擎的影响而只能通过Transform属性来操作，这个选项适用于模拟平台的移动或带有铰链关节连接刚体的动画。</p></li><li><p>Interpolate（插值）：</p><p>​    None：没有插值。</p><p>​    Interpolate：内插值，基于前一帧的Transform来平滑的此次的Transform。</p><p>​    Extrapolate：外插值，基于后一帧的Transform来平滑的此次的Transform。</p></li><li><p>Collision Detection（碰撞检测模式）：</p><p>​    Discrete：默认选项，检测场景中其他所有碰撞体进行碰撞检测。</p><p>​    Continuous：连续碰撞检测。此模式适用于那些需要与采用了连续动态碰撞检测的对象相碰撞的对象。</p><p>​    Continuous Dynamic：连续动态检测模式。</p></li><li><p>Constraints（束缚）：</p><p>Freeze Position（位置冻结）</p><p>Freeze Rotation（角度冻结）</p></li></ol><h2 id="脚本中控制刚体的常用方法："><a href="#脚本中控制刚体的常用方法：" class="headerlink" title="脚本中控制刚体的常用方法："></a>脚本中控制刚体的常用方法：</h2><ol><li>AddForce：添加一个力到刚体，使刚体开始移动</li><li>AddForceAtPosition：施加在某一个点上的力，这将可能在物体上施加扭矩力</li><li>Addtorque：为刚体增加一个扭矩</li><li>IsSleeping：判断刚体是否被休眠</li><li>MovePosition：移动刚体到某个位置</li><li>MoveRotation：使刚体旋转到某个位置</li><li>Sleep：使刚体至少休眠一帧</li><li>WakeUp：使刚体终止休眠</li><li>GetPointVelocity：获取刚体的绝对速度</li><li>GetRelativePointVelocity：获取刚体相对于某点的速度</li><li>ResetInertiaTensor：重置惯性张量和旋转</li></ol><h2 id="刚体物理学知识补充："><a href="#刚体物理学知识补充：" class="headerlink" title="刚体物理学知识补充："></a>刚体物理学知识补充：</h2><ol><li><p>刚体：指在运动中和受力作用后，形状和大小不变，而且内部各点的相对位置不变的物体。</p></li><li><p>惯性张量：描述刚体绕点旋转的惯性大小</p></li><li><p>转动惯量：描述刚体绕轴旋转的惯性大小</p></li><li><p>惯性张量与转动惯量的关系：</p><p>对于三维空间中任意一参考点 K与以此参考点为原点的直角坐标系的惯性张量<strong>I</strong>可以表示为下面的3X3的矩阵</p><p><img src="/2018/10/28/Unity3D学习笔记之Rigidbody-刚体组件/matrix.jpg" alt=""></p><p>这里，矩阵的对角元素 Ixx、Iyy、Izz分别为对于 x-轴、y-轴、z-轴的转动惯量</p></li></ol><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ol><li>操作一个物体可以操作其刚体或者Transform属性，两者选其一即可；</li><li>使用物理系统时可以通过在游戏对象的刚体上添加AddForce()或者AddTorque()函数达到通过脚本来添加作用力或扭矩力，来对刚体进行控制；</li><li>使用刚体组件也要同时使用碰撞器组件；</li><li>父子对象不应该同时具有刚体；</li><li>不应该缩放刚体的父级。</li><li>运动学刚体不受力、碰撞或关节控制，完全由动画或代码（控制Transform属性）驱动，但运动学刚体可以通过碰撞或关节影响其他刚体的运动。非运动学刚体则受力、碰撞或关节控制。</li></ol><h2 id="详细API请参考："><a href="#详细API请参考：" class="headerlink" title="详细API请参考："></a>详细API请参考：</h2><p><a href="https://docs.unity3d.com/ScriptReference/Rigidbody.html" target="_blank" rel="noopener">https://docs.unity3d.com/ScriptReference/Rigidbody.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Rigidbody面板各属性：&quot;&gt;&lt;a href=&quot;#Rigidbody面板各属性：&quot; class=&quot;headerlink&quot; title=&quot;Rigidbody面板各属性：&quot;&gt;&lt;/a&gt;Rigidbody面板各属性：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mass（质量）：
      
    
    </summary>
    
      <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="游戏开发" scheme="http://yoursite.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>C++的ifstream中使用eof最后一个字符输出两次，其实不是eof的锅！</title>
    <link href="http://yoursite.com/2018/10/25/C++%E7%9A%84ifstream%E4%B8%AD%E4%BD%BF%E7%94%A8eof%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E8%BE%93%E5%87%BA%E4%B8%A4%E6%AC%A1%EF%BC%8C%E5%85%B6%E5%AE%9E%E4%B8%8D%E6%98%AFeof%E7%9A%84%E9%94%85%EF%BC%81/"/>
    <id>http://yoursite.com/2018/10/25/C++的ifstream中使用eof最后一个字符输出两次，其实不是eof的锅！/</id>
    <published>2018-10-24T17:09:44.000Z</published>
    <updated>2018-11-21T14:27:13.952Z</updated>
    
    <content type="html"><![CDATA[<p>写C++文件输入输出流时遇到的小问题</p><p>当我执行以下代码时，最后的值会打印两次：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>,b = <span class="number">1</span>,c = <span class="number">2</span>,d = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="function">ofstream <span class="title">FileOpen</span><span class="params">(<span class="string">"Test.txt"</span>)</span></span>;</span><br><span class="line">        FileOpen&lt;&lt;<span class="string">"HelloWorld!\n"</span>;</span><br><span class="line">        FileOpen&lt;&lt;a&lt;&lt;b&lt;&lt;c&lt;&lt;d;</span><br><span class="line">        FileOpen.close();</span><br><span class="line">        <span class="function">ifstream <span class="title">Filein</span><span class="params">(<span class="string">"Test.txt"</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!Filein.eof())</span><br><span class="line">        &#123;</span><br><span class="line">                Filein.get(ch);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;ch;</span><br><span class="line">        &#125;</span><br><span class="line">        Filein.close();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        system(<span class="string">"pause"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/10/25/C++的ifstream中使用eof最后一个字符输出两次，其实不是eof的锅！/error.png" alt=""></p><p>问题在于get()方法：<strong>get()方法返回当前文件“内置指针”指向的下一个字符，然后再将“内置指针”向后移动。</strong></p><p>也就是说“内置指针”是在执行完get()后才指向下一个字符。</p><h3 id="下面来分析一下波："><a href="#下面来分析一下波：" class="headerlink" title="下面来分析一下波："></a>下面来分析一下波：</h3><p>当“内置指针”指向c时，get()返回d的值给ch，然后“内置指针”向后移动指向d，打印d的值，此时eof()返回false，而循环继续进行;</p><p>再次get()，当前“内置指针”指向d，返回的是d后面的值，然而d后面是EOF，读取失败，无法赋值给ch，ch依然为d的值，再次打印了一次d的值，get()完后，“内置指针”指向了EOF，eof()返回true，则退出而循环。</p><p>结束。</p><h3 id="原理已经懂了，进行以下的改造即可输出正确："><a href="#原理已经懂了，进行以下的改造即可输出正确：" class="headerlink" title="原理已经懂了，进行以下的改造即可输出正确："></a>原理已经懂了，进行以下的改造即可输出正确：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>,b = <span class="number">1</span>,c = <span class="number">2</span>,d = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="function">ofstream <span class="title">FileOpen</span><span class="params">(“Test.txt”)</span></span>;</span><br><span class="line">        FileOpen &lt;&lt; <span class="string">"Helloworld!\n"</span>;</span><br><span class="line">        FileOpen &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; d;</span><br><span class="line">        FileOpen.close();</span><br><span class="line">        <span class="function">ifstream <span class="title">Filein</span><span class="params">(<span class="string">"Test.txt"</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(Filein.get(ch),!Filein.eof())</span><br><span class="line">        &#123;</span><br><span class="line">              <span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        system(<span class="string">"pause"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/10/25/C++的ifstream中使用eof最后一个字符输出两次，其实不是eof的锅！/result.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写C++文件输入输出流时遇到的小问题&lt;/p&gt;
&lt;p&gt;当我执行以下代码时，最后的值会打印两次：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="文件输入输出流" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Unity终止协程的问题</title>
    <link href="http://yoursite.com/2018/10/23/Unity%E7%BB%88%E6%AD%A2%E5%8D%8F%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/23/Unity终止协程的问题/</id>
    <published>2018-10-23T15:17:30.000Z</published>
    <updated>2019-01-17T07:17:59.157Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目开发的时候发现，调用<code>StopCoroutine()</code>来终止一个正在运行的协程的时候，无法终止协程。然后通过查资料发现了一下两种办法：</p><h3 id="利用字符串来启动和终止协程："><a href="#利用字符串来启动和终止协程：" class="headerlink" title="利用字符串来启动和终止协程："></a>利用字符串来启动和终止协程：</h3><p>比如，我有一个协程<code>IEnumerator MoveAnimation()</code>，启动时要用<code>StartCoroutine(&quot;MoveAnimation&quot;)</code>，终止的时候用<code>StopCoroutine(&quot;MoveAnimation&quot;)</code>，才能正确终止协程。</p><p>要想传参，可以使用 <code>StartCoroutine(&quot;MoveAnimation&quot;, object)</code>来传参。</p><h3 id="不用字符串来启动和终止协程的方法："><a href="#不用字符串来启动和终止协程的方法：" class="headerlink" title="不用字符串来启动和终止协程的方法："></a>不用字符串来启动和终止协程的方法：</h3><p>定义一个<code>Coroutine</code>类型的变量<code>coroutine</code>，在<code>StartCoroutine(MoveAnimation())</code>后接收返回的值：</p><p><code>coroutine=StartCoroutine(&quot;MoveAnimation&quot;);</code></p><p>然后终止协程的时候利用<code>StopCoroutine(coroutine)</code>来终止。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在项目开发的时候发现，调用&lt;code&gt;StopCoroutine()&lt;/code&gt;来终止一个正在运行的协程的时候，无法终止协程。然后通过查资料发现了一下两种办法：&lt;/p&gt;
&lt;h3 id=&quot;利用字符串来启动和终止协程：&quot;&gt;&lt;a href=&quot;#利用字符串来启动和终止协程：&quot;
      
    
    </summary>
    
      <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="游戏开发" scheme="http://yoursite.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Unity界面UGUI遮挡的问题</title>
    <link href="http://yoursite.com/2018/10/22/Unity%E7%95%8C%E9%9D%A2UGUI%E9%81%AE%E6%8C%A1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/22/Unity界面UGUI遮挡的问题/</id>
    <published>2018-10-22T12:22:45.000Z</published>
    <updated>2018-11-04T14:53:17.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>在使用Unity的UGUI时候，重叠的UI控件可能会导致某一个控件点击失败，如下图：</p><p><img src="/2018/10/22/Unity界面UGUI遮挡的问题/pause.png" alt=""></p><p>在前面的图片挡住了后面的Button，导致后面的Button无法触发点击事件，此时只要把图片的Image组件的<code>Raycast Target</code>的勾选取消即可解决遮挡的问题：</p><p><img src="/2018/10/22/Unity界面UGUI遮挡的问题/image.png" alt=""></p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>鼠标点击屏幕实际上是以点击的点为原点，发射一条垂直屏幕向里的射线，然后通过射线与第一个物体的相交来判断是否点击到该物体。取消了<code>Raycast Target</code>选项表明不作为射线相交的对象，则不会挡住后面的Button</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;解决方法：&quot;&gt;&lt;a href=&quot;#解决方法：&quot; class=&quot;headerlink&quot; title=&quot;解决方法：&quot;&gt;&lt;/a&gt;解决方法：&lt;/h3&gt;&lt;p&gt;在使用Unity的UGUI时候，重叠的UI控件可能会导致某一个控件点击失败，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src
      
    
    </summary>
    
      <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="游戏开发" scheme="http://yoursite.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>steam商店页面的探索队列无法打开</title>
    <link href="http://yoursite.com/2018/10/21/steam%E5%95%86%E5%BA%97%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%8E%A2%E7%B4%A2%E9%98%9F%E5%88%97%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/"/>
    <id>http://yoursite.com/2018/10/21/steam商店页面的探索队列无法打开/</id>
    <published>2018-10-21T15:43:04.000Z</published>
    <updated>2018-10-21T16:04:55.042Z</updated>
    
    <content type="html"><![CDATA[<p>steam的探索队列可能会显示“你所在的地区不提供此物品”，此时如何解决呢？</p><h3 id="用浏览器打开steam商店页面："><a href="#用浏览器打开steam商店页面：" class="headerlink" title="用浏览器打开steam商店页面："></a>用浏览器打开steam商店页面：</h3><p><img src="/2018/10/21/steam商店页面的探索队列无法打开/home.png" alt="steam商店页面"></p><h3 id="然后按F12打开浏览器控制台（Console）："><a href="#然后按F12打开浏览器控制台（Console）：" class="headerlink" title="然后按F12打开浏览器控制台（Console）："></a>然后按F12打开浏览器控制台（Console）：</h3><p><img src="/2018/10/21/steam商店页面的探索队列无法打开/console.png" alt="控制台页面"></p><h3 id="然后在右边输入以下代码："><a href="#然后在右边输入以下代码：" class="headerlink" title="然后在右边输入以下代码："></a>然后在右边输入以下代码：</h3><p><code>$J.post(&quot;/app/7&quot;, { sessionid: g_sessionID, appid_to_clear_from_queue: APPID });</code></p><p>注意：其中的<code>APPID</code>由你当前队列的网址的以下数字串决定，把你对应的数字串替换上面代码的<code>APPID</code>即可</p><p><img src="/2018/10/21/steam商店页面的探索队列无法打开/appid.png" alt="网址中的APPID"></p>]]></content>
    
    <summary type="html">
    
      steam的探索队列可能会显示“你所在的地区不提供此物品”，此时如何解决呢？
    
    </summary>
    
      <category term="杂项" scheme="http://yoursite.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="steam" scheme="http://yoursite.com/tags/steam/"/>
    
      <category term="游戏" scheme="http://yoursite.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
</feed>
